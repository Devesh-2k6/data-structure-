#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int u, v, w;
} Edge;

Edge edges[MAX];
int parent[MAX], rank[MAX];
int numEdges, numVertices;

void initialize() {
    for (int i = 0; i < numVertices; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

int find(int i) {
    if (parent[i] != i) {
        parent[i] = find(parent[i]);
    }
    return parent[i];
}

void unionSets(int u, int v) {
    int rootU = find(u);
    int rootV = find(v);
    
    if (rootU != rootV) {
        if (rank[rootU] > rank[rootV]) {
            parent[rootV] = rootU;
        } else if (rank[rootU] < rank[rootV]) {
            parent[rootU] = rootV;
        } else {
            parent[rootV] = rootU;
            rank[rootU]++;
        }
    }
}

int compare(const void *a, const void *b) {
    return ((Edge *)a)->w - ((Edge *)b)->w;
}

void kruskal() {
    int totalWeight = 0;
    initialize();
    
    qsort(edges, numEdges, sizeof(edges[0]), compare);
    
    printf("Edges in the Minimum Spanning Tree:\n");
    for (int i = 0; i < numEdges; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int w = edges[i].w;
        
        if (find(u) != find(v)) {
            unionSets(u, v);
            totalWeight += w;
            printf("%d -- %d == %d\n", u, v, w);
        }
    }
    printf("Total weight of the Minimum Spanning Tree: %d\n", totalWeight);
}

int main() {
    printf("Enter number of vertices and edges:\n");
    scanf("%d %d", &numVertices, &numEdges);
    
    printf("Enter edges (u, v, weight):\n");
    for (int i = 0; i < numEdges; i++) {
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);
    }
    
    kruskal();
    return 0;
}
